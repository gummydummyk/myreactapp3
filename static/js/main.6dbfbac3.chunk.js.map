{"version":3,"sources":["includes/header.js","pages/Home/style.js","pages/Home/index.js","pages/Contact/index.js","pages/About/index.js","components/ScrollToTop/index.js","route.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","className","react_router_dom","exact","to","Component","Wrapper","styled","div","_templateObject","primary","css","_templateObject2","round","Homepage","style","Container","Row","Col","xs","sm","size","offset","Contact","About","ScrollToTop","prevProps","location","pathname","window","scrollTo","children","withRouter","AppRouter","header","react_router","components_ScrollToTop","path","component","Home","App","route","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6dbfbac3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem, Container } from 'reactstrap';\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n          isOpen: false\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {/* <Navbar light expand=\"md\">\r\n                    <Container>\r\n                    <NavbarBrand href=\"/\">Home</NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                        <NavItem>\r\n                            <NavLink to=\"/contact\">Contact</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink to=\"/about\">About</NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>\r\n                            Options\r\n                            </DropdownToggle>\r\n                            <DropdownMenu right>\r\n                            <DropdownItem>\r\n                                Option 1\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                Option 2\r\n                            </DropdownItem>\r\n                            <DropdownItem divider />\r\n                            <DropdownItem>\r\n                                Reset\r\n                            </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        </Nav>\r\n                    </Collapse>\r\n                    </Container>\r\n                </Navbar> */}\r\n                <nav className=\"navbar\">\r\n                    <div className=\"container\">\r\n                        <ul>\r\n                            <li><NavLink exact to=\"/\">Home</NavLink></li>\r\n                            <li><NavLink to=\"/contact\">Contact</NavLink></li>\r\n                            <li><NavLink to=\"/about\">About</NavLink></li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import styled, { css } from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 50px  0;\r\n    h1 {\r\n        color: #000;\r\n    }\r\n\r\n    p {\r\n        font-size: 14px;\r\n        text-align: justify;\r\n    }\r\n\r\n    button {\r\n        background: transparent;\r\n        border-radius: 3px;\r\n        border: 2px solid #000;\r\n        color: #000;\r\n        padding: 1em 1.75em;\r\n        cursor: pointer;\r\n    }\r\n\r\n    ${props => props.primary && css`\r\n        background: #252525;\r\n        color: #fff;\r\n\r\n        h1 {\r\n            color: red;\r\n        }\r\n    `}\r\n\r\n    border: ${props => (props.round ? '2px solid black' : '')}\r\n`;\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\r\nimport DivStyled from './style';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nclass Homepage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <DivStyled>\r\n          <div className=\"container\">\r\n            <h1>Home with default style</h1>\r\n            <p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p>\r\n            <button>Click Me</button>\r\n          </div>\r\n        </DivStyled>\r\n        <DivStyled>\r\n          <Container>\r\n            <Row>\r\n              <Col xs=\"8\" sm={{ size: 8, offset: 2 }}>\r\n                <h1>Home with default style</h1>\r\n                <p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </DivStyled>\r\n        <DivStyled primary round>\r\n          <div className=\"container\">\r\n              <h1>Home with special style</h1>\r\n              <p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p>\r\n            </div>\r\n        </DivStyled>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Homepage;\r\n","import React, { Component } from 'react';\r\n\r\nclass Contact extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <h1>Contact</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>About</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass ScrollToTop extends Component {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location.pathname !== prevProps.location.pathname) {\r\n            window.scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React, { Component } from 'react';\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nimport Header from './includes/header';\r\n\r\nimport Home from './pages/Home';\r\nimport Contact from './pages/Contact';\r\nimport About from './pages/About';\r\nimport ScrollToTop from './components/ScrollToTop';\r\n\r\nclass AppRouter extends Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Header/>\r\n                <Switch>\r\n                    <ScrollToTop>\r\n                        <Route exact path=\"/\" component={Home} />\r\n                        <Route path=\"/contact\" component={Contact} />\r\n                        <Route path=\"/about\" component={About} />\r\n                    </ScrollToTop>\r\n                </Switch>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppRouter;","import React, { Component } from 'react';\nimport './App.css';\nimport PublicRouter from \"./route\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <PublicRouter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}